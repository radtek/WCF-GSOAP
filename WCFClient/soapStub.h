/* soapStub.h
   Generated by gSOAP 2.8.34 for WCFTest.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/Imports"
#define SOAP_NAMESPACE_OF_tempuri	"http://tempuri.org/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20834
# error "GSOAP VERSION 20834 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _tempuri__DoWork;	/* WCFTest.h:144 */
class _tempuri__DoWorkResponse;	/* WCFTest.h:147 */
class _tempuri__Add;	/* WCFTest.h:150 */
class _tempuri__AddResponse;	/* WCFTest.h:153 */
class _tempuri__Sub;	/* WCFTest.h:156 */
class _tempuri__SubResponse;	/* WCFTest.h:159 */
struct __tempuri__DoWork;	/* WCFTest.h:483 */
struct __tempuri__Add;	/* WCFTest.h:553 */
struct __tempuri__Sub;	/* WCFTest.h:623 */

/* WCFTest.h:144 */
#ifndef SOAP_TYPE__tempuri__DoWork
#define SOAP_TYPE__tempuri__DoWork (7)
/* complex XSD type 'tempuri:DoWork': */
class SOAP_CMAC _tempuri__DoWork {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__DoWork
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__DoWork; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__DoWork, default initialized and not managed by a soap context
        virtual _tempuri__DoWork *soap_alloc(void) const { return SOAP_NEW(_tempuri__DoWork); }
      public:
        /// Constructor with initializations
        _tempuri__DoWork()
        {
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__DoWork() { }
        /// Friend allocator used by soap_new__tempuri__DoWork(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__DoWork * SOAP_FMAC2 soap_instantiate__tempuri__DoWork(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:147 */
#ifndef SOAP_TYPE__tempuri__DoWorkResponse
#define SOAP_TYPE__tempuri__DoWorkResponse (8)
/* complex XSD type 'tempuri:DoWorkResponse': */
class SOAP_CMAC _tempuri__DoWorkResponse {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__DoWorkResponse
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__DoWorkResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__DoWorkResponse, default initialized and not managed by a soap context
        virtual _tempuri__DoWorkResponse *soap_alloc(void) const { return SOAP_NEW(_tempuri__DoWorkResponse); }
      public:
        /// Constructor with initializations
        _tempuri__DoWorkResponse()
        {
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__DoWorkResponse() { }
        /// Friend allocator used by soap_new__tempuri__DoWorkResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__DoWorkResponse * SOAP_FMAC2 soap_instantiate__tempuri__DoWorkResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:150 */
#ifndef SOAP_TYPE__tempuri__Add
#define SOAP_TYPE__tempuri__Add (9)
/* complex XSD type 'tempuri:Add': */
class SOAP_CMAC _tempuri__Add {
      public:
        /// Optional element 'tempuri:a' of XSD type 'xsd:int'
        int *a;
        /// Optional element 'tempuri:b' of XSD type 'xsd:int'
        int *b;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Add
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__Add; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Add, default initialized and not managed by a soap context
        virtual _tempuri__Add *soap_alloc(void) const { return SOAP_NEW(_tempuri__Add); }
      public:
        /// Constructor with initializations
        _tempuri__Add()
        {
          a = (int *)0;
          b = (int *)0;
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__Add() { }
        /// Friend allocator used by soap_new__tempuri__Add(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Add * SOAP_FMAC2 soap_instantiate__tempuri__Add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:153 */
#ifndef SOAP_TYPE__tempuri__AddResponse
#define SOAP_TYPE__tempuri__AddResponse (10)
/* complex XSD type 'tempuri:AddResponse': */
class SOAP_CMAC _tempuri__AddResponse {
      public:
        /// Optional element 'tempuri:AddResult' of XSD type 'xsd:int'
        int *AddResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__AddResponse
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__AddResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__AddResponse, default initialized and not managed by a soap context
        virtual _tempuri__AddResponse *soap_alloc(void) const { return SOAP_NEW(_tempuri__AddResponse); }
      public:
        /// Constructor with initializations
        _tempuri__AddResponse()
        {
          AddResult = (int *)0;
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__AddResponse() { }
        /// Friend allocator used by soap_new__tempuri__AddResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__AddResponse * SOAP_FMAC2 soap_instantiate__tempuri__AddResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:156 */
#ifndef SOAP_TYPE__tempuri__Sub
#define SOAP_TYPE__tempuri__Sub (11)
/* complex XSD type 'tempuri:Sub': */
class SOAP_CMAC _tempuri__Sub {
      public:
        /// Optional element 'tempuri:a' of XSD type 'xsd:int'
        int *a;
        /// Optional element 'tempuri:b' of XSD type 'xsd:int'
        int *b;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__Sub
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__Sub; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__Sub, default initialized and not managed by a soap context
        virtual _tempuri__Sub *soap_alloc(void) const { return SOAP_NEW(_tempuri__Sub); }
      public:
        /// Constructor with initializations
        _tempuri__Sub()
        {
          a = (int *)0;
          b = (int *)0;
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__Sub() { }
        /// Friend allocator used by soap_new__tempuri__Sub(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__Sub * SOAP_FMAC2 soap_instantiate__tempuri__Sub(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:159 */
#ifndef SOAP_TYPE__tempuri__SubResponse
#define SOAP_TYPE__tempuri__SubResponse (12)
/* complex XSD type 'tempuri:SubResponse': */
class SOAP_CMAC _tempuri__SubResponse {
      public:
        /// Optional element 'tempuri:SubResult' of XSD type 'xsd:int'
        int *SubResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__tempuri__SubResponse
        virtual int soap_type(void) const { return SOAP_TYPE__tempuri__SubResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _tempuri__SubResponse, default initialized and not managed by a soap context
        virtual _tempuri__SubResponse *soap_alloc(void) const { return SOAP_NEW(_tempuri__SubResponse); }
      public:
        /// Constructor with initializations
        _tempuri__SubResponse()
        {
          SubResult = (int *)0;
          soap = (struct soap *)0;
        }
        virtual ~_tempuri__SubResponse() { }
        /// Friend allocator used by soap_new__tempuri__SubResponse(struct soap*, int)
        friend SOAP_FMAC1 _tempuri__SubResponse * SOAP_FMAC2 soap_instantiate__tempuri__SubResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:483 */
#ifndef SOAP_TYPE___tempuri__DoWork
#define SOAP_TYPE___tempuri__DoWork (18)
/* Wrapper: */
struct __tempuri__DoWork {
      public:
        /** Optional element 'tempuri:DoWork' of XSD type 'tempuri:DoWork' */
        _tempuri__DoWork *tempuri__DoWork;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__DoWork */
        int soap_type() const { return SOAP_TYPE___tempuri__DoWork; }
        /** Constructor with member initializations */
        __tempuri__DoWork()
        {
          tempuri__DoWork = (_tempuri__DoWork *)0;
        }
        /** Friend allocator used by soap_new___tempuri__DoWork(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__DoWork * SOAP_FMAC2 soap_instantiate___tempuri__DoWork(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:553 */
#ifndef SOAP_TYPE___tempuri__Add
#define SOAP_TYPE___tempuri__Add (22)
/* Wrapper: */
struct __tempuri__Add {
      public:
        /** Optional element 'tempuri:Add' of XSD type 'tempuri:Add' */
        _tempuri__Add *tempuri__Add;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Add */
        int soap_type() const { return SOAP_TYPE___tempuri__Add; }
        /** Constructor with member initializations */
        __tempuri__Add()
        {
          tempuri__Add = (_tempuri__Add *)0;
        }
        /** Friend allocator used by soap_new___tempuri__Add(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__Add * SOAP_FMAC2 soap_instantiate___tempuri__Add(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:623 */
#ifndef SOAP_TYPE___tempuri__Sub
#define SOAP_TYPE___tempuri__Sub (26)
/* Wrapper: */
struct __tempuri__Sub {
      public:
        /** Optional element 'tempuri:Sub' of XSD type 'tempuri:Sub' */
        _tempuri__Sub *tempuri__Sub;
      public:
        /** Return unique type id SOAP_TYPE___tempuri__Sub */
        int soap_type() const { return SOAP_TYPE___tempuri__Sub; }
        /** Constructor with member initializations */
        __tempuri__Sub()
        {
          tempuri__Sub = (_tempuri__Sub *)0;
        }
        /** Friend allocator used by soap_new___tempuri__Sub(struct soap*, int) */
        friend SOAP_FMAC1 __tempuri__Sub * SOAP_FMAC2 soap_instantiate___tempuri__Sub(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* WCFTest.h:734 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
/* SOAP_ENV__Header: */
struct SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* WCFTest.h:734 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* WCFTest.h:734 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
/* SOAP_ENV__Detail: */
struct SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* WCFTest.h:734 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
/* SOAP_ENV__Reason: */
struct SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* WCFTest.h:734 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
/* SOAP_ENV__Fault: */
struct SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* WCFTest.h:121 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* WCFTest.h:121 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _tempuri__SubResponse has binding name '_tempuri__SubResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__SubResponse
#define SOAP_TYPE__tempuri__SubResponse (12)
#endif

/* _tempuri__Sub has binding name '_tempuri__Sub' for type '' */
#ifndef SOAP_TYPE__tempuri__Sub
#define SOAP_TYPE__tempuri__Sub (11)
#endif

/* _tempuri__AddResponse has binding name '_tempuri__AddResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__AddResponse
#define SOAP_TYPE__tempuri__AddResponse (10)
#endif

/* _tempuri__Add has binding name '_tempuri__Add' for type '' */
#ifndef SOAP_TYPE__tempuri__Add
#define SOAP_TYPE__tempuri__Add (9)
#endif

/* _tempuri__DoWorkResponse has binding name '_tempuri__DoWorkResponse' for type '' */
#ifndef SOAP_TYPE__tempuri__DoWorkResponse
#define SOAP_TYPE__tempuri__DoWorkResponse (8)
#endif

/* _tempuri__DoWork has binding name '_tempuri__DoWork' for type '' */
#ifndef SOAP_TYPE__tempuri__DoWork
#define SOAP_TYPE__tempuri__DoWork (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (34)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (33)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (30)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (28)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (27)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (36)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (35)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (29)
#endif

/* _tempuri__Sub * has binding name 'PointerTo_tempuri__Sub' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Sub
#define SOAP_TYPE_PointerTo_tempuri__Sub (23)
#endif

/* _tempuri__Add * has binding name 'PointerTo_tempuri__Add' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__Add
#define SOAP_TYPE_PointerTo_tempuri__Add (19)
#endif

/* _tempuri__DoWork * has binding name 'PointerTo_tempuri__DoWork' for type '' */
#ifndef SOAP_TYPE_PointerTo_tempuri__DoWork
#define SOAP_TYPE_PointerTo_tempuri__DoWork (15)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (14)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
