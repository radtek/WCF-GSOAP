/* soapServerTestProxy.cpp
   Generated by gSOAP 2.8.34 for ServerTest.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapServerTestProxy.h"

ServerTestProxy::ServerTestProxy() : soap(SOAP_IO_DEFAULT)
{	ServerTestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ServerTestProxy::ServerTestProxy(const ServerTestProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

ServerTestProxy::ServerTestProxy(const struct soap &_soap) : soap(_soap)
{ }

ServerTestProxy::ServerTestProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	ServerTestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

ServerTestProxy::ServerTestProxy(soap_mode iomode) : soap(iomode)
{	ServerTestProxy_init(iomode, iomode);
}

ServerTestProxy::ServerTestProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	ServerTestProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

ServerTestProxy::ServerTestProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	ServerTestProxy_init(imode, omode);
}

ServerTestProxy::~ServerTestProxy()
{
	this->destroy();
	}

void ServerTestProxy::ServerTestProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns", "http://localhost:8089/ServerTest.wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
ServerTestProxy *ServerTestProxy::copy()
{	ServerTestProxy *dup = SOAP_NEW_COPY(ServerTestProxy(*(struct soap*)this));
	return dup;
}
#endif

ServerTestProxy& ServerTestProxy::operator=(const ServerTestProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void ServerTestProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void ServerTestProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	ServerTestProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ServerTestProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *ServerTestProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *ServerTestProxy::soap_fault()
{	return this->fault;
}

const char *ServerTestProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *ServerTestProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int ServerTestProxy::soap_close_socket()
{	return soap_closesock(this);
}

int ServerTestProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void ServerTestProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ServerTestProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *ServerTestProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int ServerTestProxy::add(const char *endpoint, const char *soap_action, int a, int b, int &c)
{	struct soap *soap = this;
	struct ns__add soap_tmp_ns__add;
	struct ns__addResponse *soap_tmp_ns__addResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__add.a = a;
	soap_tmp_ns__add.b = b;
	soap_begin(soap);
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__add(soap, &soap_tmp_ns__add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__add(soap, &soap_tmp_ns__add, "ns:add", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<int*>(&c)) // NULL ref?
		return soap_closesock(soap);
	soap_default_int(soap, &c);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__addResponse = soap_get_ns__addResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__addResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	c = soap_tmp_ns__addResponse->c;
	return soap_closesock(soap);
}

int ServerTestProxy::sub(const char *endpoint, const char *soap_action, int a, int b, int &c)
{	struct soap *soap = this;
	struct ns__sub soap_tmp_ns__sub;
	struct ns__subResponse *soap_tmp_ns__subResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_tmp_ns__sub.a = a;
	soap_tmp_ns__sub.b = b;
	soap_begin(soap);
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__sub(soap, &soap_tmp_ns__sub);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__sub(soap, &soap_tmp_ns__sub, "ns:sub", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__sub(soap, &soap_tmp_ns__sub, "ns:sub", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<int*>(&c)) // NULL ref?
		return soap_closesock(soap);
	soap_default_int(soap, &c);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns__subResponse = soap_get_ns__subResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns__subResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	c = soap_tmp_ns__subResponse->c;
	return soap_closesock(soap);
}
/* End of client proxy code */
