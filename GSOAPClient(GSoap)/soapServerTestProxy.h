/* soapServerTestProxy.h
   Generated by gSOAP 2.8.34 for ServerTest.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapServerTestProxy_H
#define soapServerTestProxy_H
#include "soapH.h"

    class SOAP_CMAC ServerTestProxy : public soap {
      public:
        /// Endpoint URL of service 'ServerTestProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in ServerTest.h, if any
        /// Construct a proxy with new managing context
        ServerTestProxy();
        /// Copy constructor
        ServerTestProxy(const ServerTestProxy& rhs);
        /// Construct proxy given a managing context
        ServerTestProxy(const struct soap&);
        /// Constructor taking an endpoint URL
        ServerTestProxy(const char *endpoint);
        /// Constructor taking input and output mode flags for the new managing context
        ServerTestProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        ServerTestProxy(const char *endpoint, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        ServerTestProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and managing context
        virtual ~ServerTestProxy();
        /// Initializer used by constructors
        virtual void ServerTestProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual ServerTestProxy *copy() SOAP_PURE_VIRTUAL;
        /// Copy assignment
        ServerTestProxy& operator=(const ServerTestProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault string (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail as string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        /// Web service operation 'add' (returns SOAP_OK or error code)
        virtual int add(int a, int b, int &c)
        { return this->add(NULL, NULL, a, b, c); }
        virtual int add(const char *soap_endpoint, const char *soap_action, int a, int b, int &c);
        /// Web service operation 'sub' (returns SOAP_OK or error code)
        virtual int sub(int a, int b, int &c)
        { return this->sub(NULL, NULL, a, b, c); }
        virtual int sub(const char *soap_endpoint, const char *soap_action, int a, int b, int &c);
    };
#endif
